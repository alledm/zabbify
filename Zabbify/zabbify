#!/usr/bin/python


import os
import sys
import socket
import logging
import subprocess, threading


logging.basicConfig(format='%(asctime)s %(levelname)6s : %(message)s',level=logging.ERROR)
default_log_handler = logging.StreamHandler(sys.stdout)
log =  logging.getLogger("zabbify")

defaults = {"loglevel" : "ERROR", "port" : 10050, "username" : "api", "password" : "api", "URL" : "http://%(server)s/zabbix"}
configfiles = ["/etc/zabbify.conf", "/usr/local/etc/zabbify.conf"]

try: 
    import configparser
except:
    import ConfigParser as configparser


config = configparser.ConfigParser(defaults)
try:
    config.read(configfiles)
except:
    log.critical("No config file defined. Please create one. [config = %s]" % configfiles)
    
if not config.has_section('ZABBIX'):
    log.critical("Incorrect config file. Please fix it.")
    sys.exit(1)
    
loglevel = config.get("ZABBIX", "loglevel")
        
if loglevel == "DEBUG":
    log.setLevel(logging.DEBUG)
elif loglevel == "INFO":
    log.setLevel(logging.INFO)
elif loglevel == "ERROR":
    log.setLevel(logging.ERROR)

    
try:
    from zabbix_api import ZabbixAPI, ZabbixAPIException
    from zbxsend import Metric, send_to_zabbix
except ImportError:
    sys.path.append("/usr/share/zabbify/libs")
    try:
        from zabbix_api import ZabbixAPI, ZabbixAPIException
        from zbxsend import Metric, send_to_zabbix
    except ImportError:
        log.critical(sys.exc_info()[1])



def help_message():
    print ("""zabbify.py - quick integration of scripts with Zabbix
    --itemname  <name>  	: Overrides the name of the item to be used on Zabbix
    --timeout   <seconds>    	: It the script takes longer than <seconds> Zabbify will trigger a notification
    --help        		: Displays this help 
    """)

def parse(arguments):
    global aliasname, timeout
    option_itemname = "--itemname"
    option_help = "--help"
    option_debug = "--debug"
    option_timeout = "--timeout"

    
    if option_help in arguments:
        help_message()
        sys.exit()
       
    if option_timeout in arguments:
        timeout = int(arguments.pop(arguments.index(option_timeout)+1))
        arguments.remove(option_timeout)

    if option_itemname in arguments:
        aliasname = arguments.pop(arguments.index(option_itemname)+1)
        arguments.remove(option_itemname)
        
    if option_debug in arguments:
        arguments.remove(option_debug)
        log.setLevel(logging.DEBUG)
    
    return arguments
    

    


class Command(object):
    def __init__(self, cmd, timeoutCallback = None):
        self.cmd = cmd
        self.process = None
        self.timeout = False
        self.timeoutCallback = timeoutCallback
        
        if self.timeoutCallback == None:
            self.timeoutCallback = self.default()
        
    def default(self):
        log.info("Timeout occurred")
        

    def run(self, timeout=None):
        def target():
            try:
                self.process = subprocess.Popen(self.cmd, shell = True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                self.command_output = self.process.communicate()[0]
                self.return_value = self.process.returncode
            except subprocess.CalledProcessError as e:
                self.return_value = e.returncode
                self.command_output = e.output.decode("utf-8")


        thread = threading.Thread(target=target)
        thread.start()
        thread.join(timeout)
        if (thread.isAlive()):
            self.timeout = True
            self.timeoutCallback(1)
            thread.join()
        else:
            #Clears the alert if still there
            self.timeoutCallback(0)


class ZabbixHost():
    def __init__(self, zapi, hostname):
        self.zapi = zapi
        self.hostname = hostname
        
        try:
            self.host = zapi.host.get({"output": "extend", "filter":{"host":self.hostname}}).pop()
            self.id = self.host["hostid"]
        except IndexError:
            log.error("The host %s does not appear to be registered to this Zabbix Server" % self.hostname)
            raise
        
            
        
        
    def hasItem(self, itemname):
        return self.zapi.item.exists({"hostid":self.id, "key_":itemname})
        
    def hasApplication(self, application):
        return self.zapi.application.exists({"hostid": self.id, "name" : application})
    
    def hasTrigger(self, expression):
        return self.zapi.trigger.exists({"host":self.hostname, "expression":expression})
        
    def createApplication(self, application):
        return self.zapi.application.create({ "name": application, "hostid": self.id })[0]["applicationid"]
    
    def createItem(self, key , name, item_type, value_type, data_type, application_id):
        return self.zapi.item.create({ "name" : name, "hostid": self.id ,  "key_": key, "type": item_type, "value_type": value_type, "data_type" : data_type, "applications" : [ application_id] })
    
    def createTrigger(self, expression, description, application_id ):
        return self.zapi.trigger.create({ "description" : description, "expression": expression, "applications" : [ application_id] })
    
    def getApplicationId(self, application):
        return self.zapi.application.get({"output": "extend", "filter":{"name":application, "hostid": self.id}})[0]["applicationid"]
        

class Zabbify():
    def __init__(self, config):
        self.hostregistered = False
        self.loggedin = False
        self.api_log_level = 0
        
        self.zabbix_server       = config.get("ZABBIX", "server")
        self.zabbix_server_port  = config.getint("ZABBIX", "port")
        self.zabbix_server_url   = config.get("ZABBIX", "URL", raw=False)
        
        self.username = config.get("ZABBIX", "username")
        self.password = config.get("ZABBIX", "password")
        self.loglevel = config.get("ZABBIX", "loglevel")
        self.hostname = config.get("ZABBIX", "hostname")
        
        if not self.hostname or self.hostname == "":
            self.hostname = socket.gethostname()
        
        self.zapi = ZabbixAPI(server=self.zabbix_server_url, path="", log_level=self.api_log_level)
        
        try:
            self.zapi.login(self.username, self.password)
            self.loggedin = True
        except ZabbixAPIException as e:
            log.error("Error while logging in: %s" % e)
        except:
            log.error("Error while logging in: %s" % sys.exc_info()[0])
            
        try:
            self.zhost = ZabbixHost(self.zapi, self.hostname)
            self.hostregistered = True
        except:
            self.hostregistered = False
            pass
        
        log.debug("Zabbix server %s - Port: %d  - URL %s" % (self.zabbix_server, self.zabbix_server_port, self.zabbix_server_url))
        
    def setTimeout(self, timeout):
        self.timeout = timeout
        
    def setup(self, scriptname):
        self.item_exit_value = "exit_value[%s]" % scriptname
        self.item_output = "output[%s]" % scriptname
        self.item_timeout = "timeout[%s]" % scriptname
        self.trigger_expression = "{%s:%s.last(0)}#0" % (self.hostname, self.item_exit_value)
        self.timeout_expression = "{%s:%s.last(0)}#0" % (self.hostname, self.item_timeout)
        self.application = "Scripts"
        
        if not self.zapi.logged_in():
            log.error("Could not login. Please check your config file. Will execute the script anyway.")
            return
        
        if not self.zhost:
            log.error("This host is not configured on Zabbix")
            return
              
        
        
        if self.zhost.hasApplication(self.application) != True:
            log.debug("Application %s for host %s does not exist: creating it" % (self.application, self.zhost.hostname))
            self.appid = self.zhost.createApplication(self.application)
            log.debug(self.appid)
        else:
            self.appid = self.zhost.getApplicationId(self.application)
            log.debug("Application %s for host %s exists: %s" % (self.application, self.hostname, self.appid))
            
        if self.zhost.hasItem(self.item_exit_value) != True:
            log.debug("Item %s for host %s does not exist: creating it" % (self.item_exit_value, self.zhost.hostname))
            itemid = self.zhost.createItem(self.item_exit_value, "Exit status for script $1", 2, 3, 0, self.appid)       
            log.debug("Created item %s for host %s on zabbix server %s" % (itemid["itemids"], self.hostname, self.zabbix_server))


        if self.zhost.hasItem(self.item_timeout) != True:
            log.debug("Item %s for host %s does not exist: creating it" % (item_timeout, self.hostname))
            itemid = self.zhost.createItem(self.item_timeout, "Timeout for $1", 2, 3, 3, self.appid) 
            log.debug("Created item %s for host %s on zabbix server %s" % (itemid["itemids"], self.hostname, self.zabbix_server))

        if self.zhost.hasItem(self.item_output) != True:
            log.debug("Item %s for host %s does not exist: creating it" % (self.item_output, self.hostname))
            itemid = self.zhost.createItem(self.item_output, "Output for $1", 2, 4, 3, self.appid)
            log.debug("Created item %s for host %s on zabbix server %s" % (itemid["itemids"], self.hostname, self.zabbix_server))
            
        if self.zhost.hasTrigger(self.trigger_expression) != True:
            log.debug("Trigger %s for host %s does not exist: creating it" % (self.trigger_expression, self.hostname))
            triggerid = self.zhost.createTrigger(self.trigger_expression, "Script %s on {HOST.NAME} returned a non 0 exit value" % scriptname, self.appid) 
            log.debug("Created trigger %s for host %s on zabbix server %s" % (triggerid["triggerids"], self.hostname, self.zabbix_server))
            
        if self.zhost.hasTrigger(self.timeout_expression) != True:
            log.debug("Trigger %s for host %s does not exist: creating it" % (self.timeout_expression, self.hostname))
            triggerid = self.zhost.createTrigger(self.timeout_expression, "Script %s on {HOST.NAME} timed out" % scriptname, self.appid) 
            log.debug("Created trigger %s for host %s on zabbix server %s" % (triggerid["triggerids"], self.hostname, self.zabbix_server))
            #log.debug("Running [ %s ]" % command_to_run)
            
    def run(self, command, timeout):
        command = Command(command, self.timeoutcallBack)
        command.run(timeout)
        return_value = command.return_value
        command_output = command.command_output
        
        self.sendToZabbix(self.item_exit_value, return_value)
        self.sendToZabbix(self.item_output, command_output)
    
    def timeoutcallBack(self, value):
        self.sendToZabbix(self.item_timeout, value)
    
    def sendToZabbix(self, item, value):
        if self.loggedin and self.hostregistered:
            try:
                # Sending output first
                log.debug("Sending [ %s ] to item %s:%s (Zabbix %s) " % (value, self.hostname, item, self.zabbix_server))
                output = send_to_zabbix([Metric(self.hostname , item , value )], self.zabbix_server, self.zabbix_server_port)
                log.debug(output)
                
            except:
                log.error("Error while sending metrics to zabbix server [%s]" % sys.exc_info()[0])
                log.critical(sys.exc_info())
        else:
            pass



def main():
    #Everything after "/usr/bin/zabbify" is parsed
    arguments = sys.argv[1:]
    
    #command line options that belong to zabbify are removed from the list of arguments. We are left with the actual command to run
    script_arguments = parse(arguments)
    
    

    if len(arguments) == 0:
        sys.exit(0)

    #if an alias was not defined as --itemname, then we take the name of the script we want to run
    if aliasname is None:
        scriptname = os.path.basename(script_arguments[0])
    else:
        scriptname = aliasname
   
    zabbify = None
   
    try:
        zabbify = Zabbify(config)
        zabbify.setup(scriptname)
    except Exception as e:
        print (e)
        pass
    
    command_to_run = " ".join(script_arguments)
    
    zabbify.run(command_to_run, timeout)

    
if __name__ == "__main__": 
    main()
